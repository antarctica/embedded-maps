---

include:
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'

stages:
  - 🧪 test
  - 🏗️ build
  - 🚚 publish
  - 📣 release

variables:
  # Secrets (set in GitLab CI/CD settings)
  # - AWS IAM id/secret key for 'bas-gitlab-ci-bas-embedded-maps' user
  #   - AWS_ACCESS_KEY_ID: "[Sensitive]"
  #   - AWS_SECRET_ACCESS_KEY: "[Sensitive]"

  # Publishing
  S3_BUCKET_STAGE: embedded-maps-testing.data.bas.ac.uk
  S3_BUCKET_PROD: embedded-maps.data.bas.ac.uk
  DEPLOY_SRC: dist

  # Environment test URLs
  ENV_STAGE_HREF: https://embedded-maps-testing.data.bas.ac.uk/tests/v1/integration.html
  ENV_PROD_HREF: https://embedded-maps.data.bas.ac.uk/tests/v1/production.html

image:
  name: governmentpaas/awscli:latest
  entrypoint: [""]

# Cache node_modules for faster builds
cache:
  paths:
    - node_modules/
    - /root/.cache/ms-playwright/

# Jobs

test:e2e:
  stage: 🧪 test
  image: mcr.microsoft.com/playwright:v1.50.1-noble
  script:
    - apt-get update && apt-get install -y rsync
    - echo '📦 Installing dependencies...'
    - npm ci
    - npm run prepare
    - echo '🎭 Installing Playwright browsers...'
    - npx playwright install --with-deps
    - mkdir -p .test/spec/output .test/spec/ci-snaps .test/spec/local-snaps out/report
    - echo '🧪 Running tests...'
    - npx playwright test
  after_script:
    - echo "Test report will be available at https://$CI_PROJECT_ROOT_NAMESPACE.$CI_PAGES_DOMAIN/-/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID/artifacts/out/report/index.html"
  artifacts:
    when: always
    paths:
      - out/report/
      - test-results/
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "merge_request_event"'
  variables:
    CI: 'true'
    TZ: 'UTC'
    LANG: 'en_US.UTF-8'
    DEBUG: 'pw:browser'

build:
  stage: 🏗️ build
  image: node:18-alpine
  script:
    - npm ci
    - npm run lint 
    - npm run build
  artifacts:
    paths:
      - $DEPLOY_SRC/
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_COMMIT_TAG'

publish-stage:
  stage: 🚚 publish
  needs: ['build']
  script:
    - aws s3 sync $DEPLOY_SRC/ s3://$S3_BUCKET_STAGE/v1/
  environment:
    name: staging
    url: $ENV_STAGE_HREF
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_TAG == null'

publish-prod:
  stage: 🚚 publish
  needs: ['build']
  script:
    - aws s3 sync $DEPLOY_SRC/ s3://$S3_BUCKET_PROD/v1/
  environment:
    name: production
    url: $ENV_PROD_HREF
  rules:
    - if: $CI_COMMIT_TAG

release:
  stage: 📣 release
  needs: []
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  before_script:
    - apk add --no-cache curl jq

    - export TAG_NO_PREFIX=$(echo $CI_COMMIT_TAG | cut -c 2-)
    # for a string v0.8.13, replace last digit to always be 0
    - export TAG_NO_PATCH=$(echo $CI_COMMIT_TAG | sed 's/[0-9]$/0/')

    - 'curl -s -H "Authorization: Bearer $PROJECT_ACCESS_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/milestones?title=$CI_COMMIT_TAG" > milestone_exact.json'
    - 'curl -s -H "Authorization: Bearer $PROJECT_ACCESS_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/milestones?title=$TAG_NO_PATCH" > milestone-minor.json'
    - export MILESTONE_TITLE_EXACT=$(cat milestone_exact.json | jq -r ".[0] | .title") && rm milestone_exact.json
    - export MILESTONE_TITLE_MINOR=$(cat milestone-minor.json | jq -r ".[0] | .title") && rm milestone-minor.json
    - >
      if [ "$MILESTONE_TITLE_EXACT" != "null" ]; then
          export MILESTONE_TITLE=$MILESTONE_TITLE_EXACT
      elif [ "$MILESTONE_TITLE_MINOR" != "null" ]; then
          export MILESTONE_TITLE=$MILESTONE_TITLE_MINOR
      else
          export MILESTONE_TITLE=""
      fi

    - curl -s -L -O https://github.com/taiki-e/parse-changelog/releases/download/v0.6.8/parse-changelog-x86_64-unknown-linux-musl.tar.gz
    - tar -xzf parse-changelog-x86_64-unknown-linux-musl.tar.gz -C /usr/local/bin/
    - parse-changelog CHANGELOG.md "$TAG_NO_PREFIX" > changelog.txt

    # the release section cannot access variables defined in a script but can read from a file :|
    - echo "$TAG_NO_PREFIX" > tag_no_prefix.txt
    - echo "$MILESTONE_TITLE" > milestone_title.txt
  script:
    - echo 'releasing'
  release:
    name: $(cat tag_no_prefix.txt)
    tag_name: $CI_COMMIT_TAG
    milestones:
      - $(cat milestone_title.txt)
    description: $(cat changelog.txt)
    assets:
      links:
        - name: README
          url: '$CI_PROJECT_URL/-/blob/$CI_COMMIT_TAG/README.md'
          link_type: runbook
  rules:
    - if: $CI_COMMIT_TAG
